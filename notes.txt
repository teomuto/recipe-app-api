simple docker-compose CLI example

docker-compose run --rm app sh -c "python manage.py collectstatic"

docker-compose runs a Docker Compose command
run will start a specific container defined in config
--rm removes the container
app is the name of the service
sh -c passes in a shell command


##################################################################
on Dockerfile
python alpine versions are linux based images that are very light on cofigurations and suited to run on lower specs machines
PYTHONBUFFERED 1 tells python to not buffer the output and print it straight to console, avoiding delays
COPY ./requirements.txt /tmp/requirements.txt copies the first filename from the local machine to the second filename that is in the docker image

RUN python -m venv /py && \ # new virtual enviroment
    /py/bin/pip install --upgrade pip && \ # upgrades pip
    /py/bin/pip install -r /tmp/requirements.txt && \ # install requirements into venv
    if [ $DEV = "true"]; \ # if dev enviroment, install dev pendencies
        then /py/bin/pip install -r requirements.dev.txt ; \
    fi && \ 
    rm -rf /tmp && \ # remove directory to avoid extra dependencies and make image as light-weight as possible, had to remove this line
                     # for some reason it was preventing the container from installing the packages
    adduser \ # adds user into image (avoid using root user)
        --disabled-password \ 
        --no-create-home \
        django-user # username

slightly more effitient to run commmands in one single command broken down in lines with &&\ because if ran with multiples RUN commands it would create
multiple image layers

ENV PATH="/py/bin/$PATH" defines enviroment to where run commands from

USER django-user runs image as the last declared user, avoiding root user permissions and possibly compromising the entire application

#####################################################################
version: "3.9" # version of docker compose syntax


services:
  app:
    build:
      context: . # current directory
      args:
       - DEV=true
    ports:
     - "8000:8000" # port 8000 from local machine to port 8000 to docker container
    volumes:
     - ./app:/app # same as ports, so the code in project is in sync with the container without having to rebuild it every single time
    command: >
     sh -c "python manage.py runserver 0.0.0.0:8000" 

#####################################################################
start django project command
docker-compose run --rm app sh -c "django-admin startproject app ."

check version of some package in the container:
docker-compose run --rm app sh -c "python -m <package-name> --version"
